
class Solution {
public:
    unordered_map <Node*, Node*> visited;

    Node* cloneGraph(Node* node) {

        if(!node)
            return NULL;

        Node* newNode = new Node(node->val);
        visited[node] = newNode;
        for(Node* neighbour : node->neighbors){
            if(visited.find(neighbour) == visited.end()){
                newNode->neighbors.push_back(cloneGraph(neighbour));
            }else{
                newNode->neighbors.push_back(visited[neighbour]);
            }
        }
        return newNode;
    }
};

/*
Time Complexity O(V + E)
Space Complexity O(V)
*/
